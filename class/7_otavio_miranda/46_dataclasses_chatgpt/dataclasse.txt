ğŸ“š Aula: IntroduÃ§Ã£o ao dataclass e field em Python
1. O que Ã© dataclass?

O mÃ³dulo dataclasses foi introduzido no Python 3.7 para facilitar a criaÃ§Ã£o de classes que sÃ£o usadas principalmente para armazenar dados.

Antes do dataclass, terÃ­amos que escrever muito cÃ³digo repetitivo, como __init__, __repr__, __eq__ etc.

2. ImportaÃ§Ã£o
from dataclasses import dataclass, field


@dataclass â†’ um decorador que transforma sua classe, gerando automaticamente mÃ©todos Ãºteis.

field â†’ usado para configurar atributos especÃ­ficos (valores padrÃ£o, inicializaÃ§Ã£o, comportamento especial).

3. Criando uma dataclass
ğŸ“Œ Exemplo simples
from dataclasses import dataclass

@dataclass
class Person:
    name: str
    age: int


Isso automaticamente cria:

__init__(self, name, age)

__repr__(self)

__eq__(self, other)

âœ… Exemplo de uso:

p1 = Person("Luan", 25)
print(p1)  # Person(name='Luan', age=25)

4. Recursos do dataclass
4.1 âœ… InicializaÃ§Ã£o automÃ¡tica

VocÃª nÃ£o precisa escrever __init__ manualmente.
O decorador gera tudo:

@dataclass
class Product:
    id: int
    name: str
    price: float = 0.0  # valor padrÃ£o

p = Product(1, "Caneta")
print(p)  # Product(id=1, name='Caneta', price=0.0)

4.2 âœ… ComparaÃ§Ã£o entre objetos

dataclass gera automaticamente __eq__, entÃ£o vocÃª pode comparar objetos:

p1 = Product(1, "Caneta")
p2 = Product(1, "Caneta")
print(p1 == p2)  # True

4.3 âœ… OrdenaÃ§Ã£o

Se quiser, pode habilitar comparaÃ§Ã£o de ordem (<, >, <=, >=):

from dataclasses import dataclass

@dataclass(order=True)
class Point:
    x: int
    y: int

p1 = Point(1, 5)
p2 = Point(2, 3)
print(p1 < p2)  # True (compara primeiro x, depois y)

5. Usando field

O field permite configurar cada atributo de forma mais detalhada.

ğŸ“Œ 5.1 Valores padrÃ£o
from dataclasses import dataclass, field

@dataclass
class User:
    name: str
    active: bool = field(default=True)

ğŸ“Œ 5.2 Valores padrÃ£o mutÃ¡veis (importante!)

Nunca use listas/dicionÃ¡rios diretamente como valor padrÃ£o!
Use default_factory com field.

@dataclass
class Team:
    name: str
    members: list = field(default_factory=list)

t = Team("Pythonistas")
t.members.append("Luan")
print(t.members)  # ['Luan']


Sem default_factory, todos os objetos compartilhariam a mesma lista, causando bugs!

ğŸ“Œ 5.3 Atributos que nÃ£o entram no __init__
@dataclass
class Order:
    product: str
    quantity: int
    total: float = field(init=False)

    def __post_init__(self):
        self.total = self.quantity * 10.0


ğŸ“Œ ExplicaÃ§Ã£o:

init=False â†’ nÃ£o serÃ¡ pedido no construtor.

__post_init__ â†’ mÃ©todo especial chamado logo apÃ³s o __init__ gerado pelo dataclass.

ğŸ“Œ 5.4 Ignorando no repr

VocÃª pode esconder atributos do __repr__:

@dataclass
class Secret:
    username: str
    password: str = field(repr=False)

s = Secret("admin", "1234")
print(s)  # Secret(username='admin')

6. Resumo das OpÃ§Ãµes do dataclass
ParÃ¢metro	FunÃ§Ã£o
init	Gera __init__. (padrÃ£o: True)
repr	Gera __repr__. (padrÃ£o: True)
eq	Gera __eq__. (padrÃ£o: True)
order	Gera operadores de comparaÃ§Ã£o. (padrÃ£o: False)
frozen	Torna a classe imutÃ¡vel.